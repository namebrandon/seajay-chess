Git Branch Management for SeaJay Development / OpenBench Testing

  Overview

  When using OpenBench for chess engine testing (which is a core function in SeaJay development), descriptive branch names are essential for readable test identification. Instead of
  seeing cryptic test names like "fd3d575e vs b949c42", you'll see meaningful names like "feature/20250819-null-move vs main".

  Branch Naming Convention

  Directory Structure

  origin/
  ├── main                        # Primary development branch
  ├── feature/                    # New functionality
  │   └── YYYYMMDD-description
  ├── bugfix/                     # Bug fixes
  │   └── YYYYMMDD-description
  ├── test/                       # Experimental changes
  │   └── YYYYMMDD-description
  ├── tune/                       # Parameter tuning (SPSA)
  │   └── YYYYMMDD-description
  └── ob/                         # Historical reference builds
      └── YYYYMMDD-description

  Branch Categories

  | Prefix   | Purpose               | Example                      | Lifecycle                   |
  |----------|-----------------------|------------------------------|-----------------------------|
  | feature/ | New functionality     | feature/20250819-pondering   | Merge to main if successful |
  | bugfix/  | Bug fixes             | bugfix/20250819-illegal-move | Merge to main when fixed    |
  | test/    | Experimental ideas    | test/20250819-eval-tweak     | Delete after testing        |
  | tune/    | SPSA parameter tuning | tune/20250819-piece-values   | Delete after tuning         |
  | ob/      | Historical references | ob/20250819-v1.0-release     | Keep long-term              |

  Git Alias Setup

  1. Install All Aliases

  Run these commands to set up your Git environment:

  # Branch creation aliases
  git config --global alias.feature '!f() { git checkout -b feature/$(date +%Y%m%d)-$1 && git push -u origin feature/$(date 
  +%Y%m%d)-$1; }; f'
  git config --global alias.bugfix '!f() { git checkout -b bugfix/$(date +%Y%m%d)-$1 && git push -u origin bugfix/$(date +%Y%m%d)-$1; 
  }; f'
  git config --global alias.test '!f() { git checkout -b test/$(date +%Y%m%d)-$1 && git push -u origin test/$(date +%Y%m%d)-$1; }; f'
  git config --global alias.tune '!f() { git checkout -b tune/$(date +%Y%m%d)-$1 && git push -u origin tune/$(date +%Y%m%d)-$1; }; f'
  git config --global alias.ob '!f() { git checkout -b ob/$(date +%Y%m%d)-$1 && git push -u origin ob/$(date +%Y%m%d)-$1; }; f'

  # Branch listing aliases
  git config --global alias.list-features '!git branch -r | grep "origin/feature/"'
  git config --global alias.list-bugfix '!git branch -r | grep "origin/bugfix/"'
  git config --global alias.list-tests '!git branch -r | grep "origin/test/"'
  git config --global alias.list-tune '!git branch -r | grep "origin/tune/"'
  git config --global alias.list-ob '!git branch -r | grep "origin/ob/"'
  git config --global alias.list-all-branches '!git branch -r | grep -E "origin/(feature|bugfix|test|tune|ob)/" | sort'

  # Branch cleanup aliases (WARNING: These delete remote branches!)
  git config --global alias.clean-tests '!git branch -r | grep "origin/test/" | sed "s/origin\\///" | xargs -r -n 1 git push origin 
  --delete'
  git config --global alias.clean-bugfix '!git branch -r | grep "origin/bugfix/" | sed "s/origin\\///" | xargs -r -n 1 git push origin 
  --delete'
  git config --global alias.clean-features '!git branch -r | grep "origin/feature/" | sed "s/origin\\///" | xargs -r -n 1 git push 
  origin --delete'
  git config --global alias.clean-tune '!git branch -r | grep "origin/tune/" | sed "s/origin\\///" | xargs -r -n 1 git push origin 
  --delete'

  # Utility aliases
  git config --global alias.show-branch-age '!git for-each-ref --format="%(refname:short) %(committerdate:relative)" 
  refs/remotes/origin/ | grep -E "(feature|bugfix|test|tune|ob)/" | column -t'
  git config --global alias.clean-old-tests '!git for-each-ref --format="%(refname:short) %(committerdate:unix)" 
  refs/remotes/origin/test/ | while read branch date; do if [ $(($(date +%s) - date)) -gt 604800 ]; then echo "Deleting $branch"; git 
  push origin --delete ${branch#origin/}; fi; done'

  2. Verify Installation

  # Check that aliases were created
  git config --global --list | grep alias

  Usage Examples

  Creating Branches

  # Working on a new feature
  git feature null-move-pruning
  # Creates: feature/20250819-null-move-pruning

  # Fixing a bug
  git bugfix castling-rights
  # Creates: bugfix/20250819-castling-rights

  # Testing an experimental idea
  git test aggressive-lmr
  # Creates: test/20250819-aggressive-lmr

  # Running SPSA tuning
  git tune eval-weights
  # Creates: tune/20250819-eval-weights

  # Saving a historical reference
  git ob pre-refactor-baseline
  # Creates: ob/20250819-pre-refactor-baseline

  OpenBench Workflow

  1. Feature Development

  # Create feature branch
  git feature multi-pv

  # Make your changes
  vim src/search.cpp
  git add -A
  git commit -m "Implement multi-PV search"

  # Test in OpenBench
  # Dev Branch: feature/20250819-multi-pv
  # Base Branch: main
  # Test shows: "feature/20250819-multi-pv vs main"

  # If successful, merge to main
  git checkout main
  git merge feature/20250819-multi-pv
  git push origin main

  # Create historical reference
  git ob post-multi-pv

  # Clean up feature branch
  git push origin --delete feature/20250819-multi-pv

  2. Bug Fix

  # Create bugfix branch
  git bugfix en-passant-capture

  # Fix the bug
  vim src/movegen.cpp
  git add -A
  git commit -m "Fix en passant capture validation"

  # Test in OpenBench
  # Dev Branch: bugfix/20250819-en-passant-capture
  # Base Branch: main

  # After verification, merge and cleanup
  git checkout main
  git merge bugfix/20250819-en-passant-capture
  git push origin main
  git push origin --delete bugfix/20250819-en-passant-capture

  3. Experimental Testing

  # Quick experiment
  git test futility-pruning-v2

  # Make changes and commit
  git add -A
  git commit -m "Experimental futility pruning"

  # Test in OpenBench
  # Dev Branch: test/20250819-futility-pruning-v2
  # Base Branch: ob/20250815-stable-baseline

  # Whether it works or not, clean up test branches periodically
  git clean-tests  # Deletes ALL test branches - be careful!

  Branch Management

  # List branches by type
  git list-features      # Show all feature branches
  git list-tests         # Show all test branches
  git list-ob           # Show all historical references
  git list-all-branches  # Show everything organized

  # Check branch ages
  git show-branch-age    # Shows how old each branch is

  # Cleanup old branches
  git clean-tests        # Delete ALL test branches
  git clean-old-tests    # Delete test branches older than 7 days
  git clean-bugfix       # Delete ALL bugfix branches

  # WARNING: Never run git clean-ob unless you're sure!
  # Historical references should be kept long-term

  Best Practices

  1. Branch Lifecycle

  - feature/ - Merge to main if successful, then delete
  - bugfix/ - Merge to main when fixed, then delete
  - test/ - Delete after testing (pass or fail)
  - tune/ - Delete after tuning run completes
  - ob/ - Keep indefinitely as historical references

  2. Historical References (ob/)

  Create ob/ branches for:
  - Release versions (ob/20250819-v1.0-release)
  - Significant milestones (ob/20250819-elo-2000)
  - Before major refactoring (ob/20250819-pre-refactor)
  - Stable baselines for testing (ob/20250819-stable-baseline)

  3. Cleanup Strategy

  # Weekly cleanup routine
  git list-all-branches      # Review what you have
  git show-branch-age        # Check ages
  git clean-old-tests        # Auto-cleanup old test branches
  git list-bugfix           # Manually review bugfix branches
  git list-features         # Manually review feature branches

  4. OpenBench Testing Tips

  - Always use branch names, not commit SHAs
  - Create the branch BEFORE starting the OpenBench test
  - Push the branch immediately after creation (the aliases do this automatically)
  - Use meaningful descriptions after the date

  Troubleshooting

  Branch Already Exists

  If you get an error that a branch already exists:
  # Delete the old branch first
  git push origin --delete feature/20250819-some-feature
  # Then create it again
  git feature some-feature

  Can't Delete Branch

  If deletion fails because the branch is checked out:
  git checkout main
  git branch -D local-branch-name
  git push origin --delete remote-branch-name

  View Alias Definition

  To see what an alias does:
  git config --global --get alias.feature

  Integration with CLAUDE.md

  Add this to your CLAUDE.md file:

  ## Git Branch Management

  This project uses a structured branch naming convention for OpenBench testing:
  - `feature/YYYYMMDD-name` - New features
  - `bugfix/YYYYMMDD-name` - Bug fixes
  - `test/YYYYMMDD-name` - Experiments
  - `tune/YYYYMMDD-name` - SPSA tuning
  - `ob/YYYYMMDD-name` - Historical references

  Use Git aliases to create branches:
  - `git feature <name>` - Create feature branch
  - `git bugfix <name>` - Create bugfix branch
  - `git test <name>` - Create test branch
  - `git tune <name>` - Create tuning branch
  - `git ob <name>` - Create historical reference

  List branches with:
  - `git list-all-branches` - Show all organized branches
  - `git show-branch-age` - Show branch ages

  When creating OpenBench tests, use branch names (not commit SHAs) for readable test identification.

  This system will make your OpenBench testing much more organized and professional, with clear test names and easy branch management!